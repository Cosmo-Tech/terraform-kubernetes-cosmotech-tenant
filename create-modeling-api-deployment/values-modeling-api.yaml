apiConfig:
  configYaml: |-
    nodeSelector:
      cosmotech.com/tier: services
    tolerations:
      - key: vendor
        value: cosmotech
        effect: NoSchedule
    serviceMonitor:
      enabled: ${MONITORING_ENABLED}
      namespace: ${MONITORING_NAMESPACE}
    persistence:
      storageClass: ${PERSISTENCE_STORAGE_CLASS}
    extraEnv:
      env:
        - name: CSM_MODELINGAPI_S3_USERNAME
          valueFrom:
            secretKeyRef:
              name: seaweedfs-${NAMESPACE}-s3-auth
              key: argo-workflows-username
        - name: CSM_MODELINGAPI_S3_PASSWORD
          valueFrom:
            secretKeyRef:
              name: seaweedfs-${NAMESPACE}-s3-auth
              key: argo-workflows-password
    config:
      csm:
        modelingApi:
          argoWorkflows:
            host: "http://${ARGO_RELEASE_NAME}-server.${NAMESPACE}.svc.cluster.local:2746"
            namespace: ${NAMESPACE}
            serviceAccountName: ${ARGO_SERVICE_ACCOUNT}
          loki:
            host: http://loki.${MONITORING_NAMESPACE}.svc.cluster.local:3100
          s3:
            host: http://miniocsmv2.${NAMESPACE}.svc.cluster.local:9000
            bucket: argo-workflows
          simulatorRegistry:
            host: csmenginesdev.azurecr.io
    image:
      tag: "nightly"
      credentials:
        # -- Existing image pull secret
        pullSecret: "${HELM_RELEASE_NAME}-${NAMESPACE}-api-docker-secret"
tektonSa:
  serviceAccount:
    annotations: {}
kubernetesClusterDomain: cluster.local
host: ${COSMOTECH_API_DNS_NAME}
hostPathContext: eng-test-dev/modeling-api
registryUrl: ghcr.io/cosmo-tech
chartName: cosmotech-modeling-api-chart
chartVersion: 0.0-main
apiGithubWebhookSecret:
  secretToken: ${WEBHOOK_SECRET}
apiDockerSecret:
  dockerconfigjson: ${DOCKER_SECRET}
tolerations:
  - key: "vendor"
    operator: "Equal"
    value: "tekton"
    effect: "NoSchedule"
nodeSelector:
  "cosmotech.com/tier": "services"
  "kubernetes.io/os": "linux"
ingressType: "${INGRESS_TYPE}"
ngrokHost: "${NGROK_HOST}"
useOciRegistry: '"${USE_OCI_REGISTRY}"'