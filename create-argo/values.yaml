server:
  clusterWorkflowTemplates:
    enabled: false
  serviceAccount:
    automountServiceAccountToken: true
  nodeSelector:
    "cosmotech.com/tier": "services"
  tolerations:
    - key: "vendor"
      operator: "Equal"
      value: "cosmotech"
      effect: "NoSchedule"
  service:
    ports:
      http: 2746

controller:
  persistence:
    archive:
      enabled: true
  config: |
    {{- if .Values.controller.instanceID.enabled }}
    {{- if .Values.controller.instanceID.useReleaseName }}
    instanceID: {{ .Release.Name }}
    {{- else }}
    instanceID: {{ .Values.controller.instanceID.explicitID }}
    {{- end }}
    {{- end }}
    parallelism:
    namespaceParallelism:
    {{- if or .Values.executor.resources .Values.executor.extraEnvVars .Values.executor.containerSecurityContext }}
    executor:
      {{- if .Values.executor.resources }}
      resources: {{- include "common.tplvalues.render" (dict "value" .Values.executor.resources "context" $) | nindent 4 }}
      {{- else if ne .Values.executor.resourcesPreset "none" }}
      resources: {{- include "common.resources.preset" (dict "type" .Values.executor.resourcesPreset) | nindent 4 }}
      {{- end }}
      {{- if .Values.executor.extraEnvVars }}
      env: {{- include "common.tplvalues.render" (dict "value" .Values.executor.extraEnvVars "context" $) | nindent 4 }}
      {{- end }}
      {{- if .Values.executor.containerSecurityContext }}
      securityContext: {{- omit .Values.executor.containerSecurityContext "enabled" | toYaml | nindent 4 }}
      {{- end }}
    {{- end }}
    artifactRepository:
      archiveLogs: true
      s3:
        endpoint: "${S3_ENDPOINT}"
        bucket: "${S3_BUCKET_NAME}"
        insecure: true
        accessKeySecret:
          name: "${S3_CREDENTIALS_SECRET}"
          key: "${S3_USERNAME_KEY}"
        secretKeySecret:
          name: "${S3_CREDENTIALS_SECRET}"
          key: "${S3_PASSWORD_KEY}"
    {{- if .Values.controller.metrics.enabled }}
    metricsConfig: {{- include "common.tplvalues.render" (dict "value" .Values.controller.metrics "context" $) | nindent 2 }}
    {{- end }}
    {{- if .Values.controller.telemetry.enabled }}
    telemetryConfig: {{- include "common.tplvalues.render" (dict "value" .Values.controller.telemetry "context" $) | nindent 2 }}
    {{- end }}
    {{- if (include "argo-workflows.controller.persistence.enabled" .) }}
    persistence:
      connectionPool:
        maxIdleConns: 100
        maxOpenConns: 0
      nodeStatusOffLoad: false
      archive: {{ include "common.tplvalues.render" (dict "value" .Values.controller.persistence.archive.enabled "context" $) }}
      {{- if or .Values.postgresql.enabled (and .Values.externalDatabase.enabled (eq .Values.externalDatabase.type "postgresql")) }}
      postgresql:
      {{- else if or .Values.mysql.enabled (and .Values.externalDatabase.enabled (eq .Values.externalDatabase.type "mysql")) }}
      mysql:
      {{- end }}
        host: {{ include "argo-workflows.controller.database.host" . }}
        port: {{ include "argo-workflows.controller.database.port" . }}
        database: {{ include "argo-workflows.controller.database" . }}
        tableName: argo_workflows
        userNameSecret:
          name: {{ include "argo-workflows.controller.database.username.secret" . }}
          key: username
        passwordSecret:
          name: {{ include "argo-workflows.controller.database.password.secret" . }}
          key: {{ include "argo-workflows.controller.database.password.secret.key" . }}
    {{- end }}
    {{- if .Values.controller.workflowDefaults }}
    workflowDefaults: {{- include "common.tplvalues.render" (dict "value" .Values.controller.workflowDefaults "context" $) | nindent 2 }}
    {{- end }}
    {{- if and .Values.server.auth.enabled .Values.server.auth.sso.enabled }}
    sso: {{- include "common.tplvalues.render" (dict "value" .Values.server.auth.sso.config "context" $) | nindent 2 }}
    {{- end }}
  clusterWorkflowTemplates:
    enabled: false
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  workflowDefaults:
    spec:
      securityContext:
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
        fsGroupChangePolicy: Always
        seLinuxOptions: {}
        seccompProfile:
          type: RuntimeDefault
      # make sure workflows do not run forever. Default limit set is 7 days (604800 seconds)
      activeDeadlineSeconds: 604800
      ttlStrategy:
        # keep workflows that succeeded for 1d (86400 seconds).
        # We can still view them since they are archived.
        secondsAfterSuccess: 86400
        # keep workflows that have completed (either successfully or not) for 3d (259200 seconds).
        # We can still view them since they are archived.
        secondsAfterCompletion: 259200
      podGC:
        # Delete pods when workflows are successful.
        # We can still access their logs and artifacts since they are archived.
        # One of "OnPodCompletion", "OnPodSuccess", "OnWorkflowCompletion", "OnWorkflowSuccess"
        strategy: OnWorkflowSuccess
      volumeClaimGC:
        # Delete PVCs when workflows are done. However, due to Kubernetes PVC Protection,
        # such PVCs will just be marked as Terminating, until no pod is using them.
        # Pod deletion (either via the Pod GC strategy or the TTL strategy) will allow to free up
        # attached PVCs.
        # One of "OnWorkflowCompletion", "OnWorkflowSuccess"
        strategy: OnWorkflowCompletion
  serviceAccount:
    automountServiceAccountToken: true
  nodeSelector:
    "cosmotech.com/tier": "services"
  tolerations:
    - key: "vendor"
      operator: "Equal"
      value: "cosmotech"
      effect: "NoSchedule"

executor:
  resources:
    requests:
      cpu: 2
      memory: 512Mi
    limits:
      cpu: 3
      memory: 1024Mi
  extraEnvVars:
    - name: RESOURCE_STATE_CHECK_INTERVAL
      value: 1s
    - name: WAIT_CONTAINER_STATUS_CHECK_INTERVAL
      value: 1s

ingress:
  enabled: false

workflows:
  serviceAccount:
    name: ${ARGO_SERVICE_ACCOUNT}
    automountServiceAccountToken: true

postgresql:
  enabled: false

externalDatabase:
  enabled: true
  type: "postgresql"
  host: "${POSTGRES_RELEASE_NAME}"
  port: "5432"
  username: ${ARGO_POSTGRESQL_USER}
  password: ""
  database: ${ARGO_DATABASE}
  existingSecret: ${ARGO_POSTGRESQL_SECRET_NAME}